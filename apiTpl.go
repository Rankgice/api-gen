// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package main generated by go-bindata.// sources:
// tpl/api.tpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplApiTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4f\x6b\x13\x41\x14\xbf\x2f\xec\x77\x78\x24\x97\x04\x84\x45\x10\x0f\x01\xa1\xfe\x01\x29\x88\x48\xac\xa7\x52\xda\x69\xe7\x25\x1d\xd9\xcc\xc6\x9d\x49\x69\xbb\x04\x14\xd1\xc6\x53\x0e\x5a\x45\x90\xda\x14\x15\x4f\x26\x97\x1e\x4a\x0f\x7e\x19\xb3\x66\xbf\x45\x99\xdd\x49\xbb\x3b\xbb\x5d\x02\xcd\x69\xf3\xde\xdb\xdf\xbf\x7d\x33\x62\x8f\x4b\xb2\x0b\xf7\xa0\xb2\x73\xbb\x62\x5b\xb6\xb5\x24\xd0\xdf\x41\x1f\x6a\xb6\x05\x00\xd0\xf5\xb1\xc5\x76\x1b\x50\x0d\x92\xa7\xbe\x6d\xd5\x6d\x4b\xcd\xb0\x2d\x84\x6a\x20\xc9\xa6\x8b\x4f\x49\x07\xfb\x10\x24\x6f\x38\x4e\xf8\xfd\xe7\x6c\x7c\xa2\x7b\x0f\xbd\x4e\x07\xb9\xec\x4f\x07\x5f\x66\xa3\xdf\xc9\xc8\xd2\x36\xe1\xd4\x45\x1f\x1e\xa3\xac\x06\x2b\x97\x10\x4f\x98\x90\xc9\x44\x1b\x25\x38\x69\x74\xc7\x65\x42\x42\x2d\x3d\xdd\xc4\x57\x75\xf0\x51\xf6\x7c\x2e\xb2\x1d\x85\xd3\x44\x51\x57\x7e\x4a\x24\xcd\xc6\xbf\xc2\xb7\xef\xca\x25\x2d\xf3\x96\x77\x9d\x24\xc6\x5b\x9e\xd3\x60\xb4\x58\x84\x7a\xd3\x10\xf1\x79\x32\x3d\x39\x32\x44\x18\xf4\xf7\x29\x4d\x83\xe8\x8f\xe0\x09\x93\x9b\x50\x5a\x96\x86\x90\x3e\xe3\xed\x14\xf7\x74\x70\x1c\x7d\xfd\x51\xce\xfd\x08\xdd\x3c\x37\x45\x17\x25\x1a\xec\x49\x31\xeb\x3d\x47\x19\x7e\x38\x8b\x0e\x86\x8b\x10\x3f\x20\x72\x6b\x7b\x71\xf6\x4d\x3d\xae\x3a\xb5\x65\x9a\x7c\xed\x52\xf7\xff\xfe\xfe\x09\x3f\x9d\x95\x8b\x78\xd1\xa5\x44\x62\x41\xf8\x3d\x33\xfb\x5e\x3c\xb9\x50\xfc\x7d\xdb\x92\x7b\x5d\x75\x50\x32\xa3\xea\xac\xe8\x92\x5a\x13\xcd\xf4\x8c\xb4\x11\xe6\x3f\xc6\xe5\xdd\x3b\x00\x1b\x2f\x85\xc7\x1b\x95\x2e\x69\xe3\x2d\xaf\x2b\x99\xc7\x89\x5b\x81\x96\xe7\x77\xcc\xe2\x06\x38\x0e\x44\xa3\xd3\xff\xc7\x6f\xae\xe0\x9e\xb3\x7d\xbc\x06\x6e\x5d\xb0\xfd\x62\x4c\xa3\x13\x03\x87\xe3\x61\x34\x3a\x0d\x0f\x27\xd1\xc1\x30\xb6\x55\x60\x4c\x6f\x7c\xde\x5c\xf1\xb8\x3e\xa5\xf3\x7b\x43\xfd\xd5\xde\x57\xd7\x8a\x60\xb5\x76\x75\x11\xe4\x64\x67\x8b\xb1\xe2\x92\xfb\x47\x25\xd3\x44\xd1\x73\x65\xfa\x31\x9d\x8d\x1f\x97\x8a\xd3\x31\x7b\x31\xdb\x74\xf0\x5e\x65\x7f\xfe\x31\x3c\xfa\x96\x36\x7c\xb9\x9e\x73\x9b\x49\x01\x56\xd7\x92\x2f\xa2\x49\x19\x5d\x2f\xf4\x95\xab\xc7\x64\x8c\xce\xdd\x5c\x11\xa5\x8c\x04\xc6\x3a\x65\x98\x6e\xb4\x49\x39\xa4\x9b\x2c\x91\x42\x5e\xf1\x24\x71\x73\x1a\xa5\xaa\xe6\x50\x8d\x6a\x82\xf8\xfa\x3c\x3c\x9c\xc4\x39\x5c\x04\x00\x00\xff\xff\xbf\x76\x5e\x8a\xca\x06\x00\x00")

func tplApiTplBytes() ([]byte, error) {
	return bindataRead(
		_tplApiTpl,
		"tpl/api.tpl",
	)
}

func tplApiTpl() (*asset, error) {
	bytes, err := tplApiTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/api.tpl", size: 1738, mode: os.FileMode(438), modTime: time.Unix(1730450540, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/api.tpl": tplApiTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"api.tpl": &bintree{tplApiTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
