// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package main generated by go-bindata.// sources:
// tpl/api.tpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplApiTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4f\x6b\x13\x41\x14\xbf\x2f\xec\x77\x78\x24\x97\x04\x84\x45\x10\x0f\x01\xa1\x8a\x20\x05\x11\x89\xf5\x54\x4a\x33\xed\xbc\xa4\x23\xdb\xdd\x75\xe6\xa5\xb4\x5d\x72\x12\xb1\x7a\xf1\x22\x8a\x1e\xd4\x16\x15\x4f\xd6\xa3\x3d\xf9\x65\x9a\x90\x7e\x0b\x99\xcc\xa4\xee\xce\x4c\x43\x34\xa7\xcd\x6f\xde\xfb\xfd\x79\xf3\x46\x1d\x64\xc4\xf6\xe1\x16\x34\xf6\xae\x37\xe2\x28\x8e\x56\x14\xca\x3d\x94\xd0\x8a\x23\x00\x80\x42\x62\x5f\xec\x77\xa0\x59\x9a\xaf\x51\x1c\xb5\xe3\x48\xd7\x88\x6d\x84\x66\x49\x6c\x2b\xc5\x07\x6c\x17\x47\x50\x9a\x8e\x24\x99\x7c\xfa\x3a\x3d\x3d\x39\xff\xf5\x61\xfc\xea\x78\x7c\xf4\x6e\x7a\xfc\xdd\x9c\xac\xec\xb0\x8c\xa7\x28\xe1\x1e\x52\xb3\x5c\xbb\xec\xbc\x2f\x14\x99\x8a\x01\x12\x24\x55\xd2\x24\x15\x8a\xa0\x55\xad\xee\xe2\xd3\x36\x48\xa4\xa1\xcc\x54\xfd\x44\xf3\x74\x51\xb5\x75\x0c\xdf\xc9\xf4\xf4\xdb\xe4\xd9\xf3\xc5\x4e\x56\xb3\x7e\x7e\x95\x13\x91\xf5\xf3\xa4\x23\x78\x58\x5b\x77\x3a\xda\x6f\x7f\x8e\x4f\x3e\x1a\x6d\x47\xf5\x36\xe7\xd5\x5e\x3b\xe9\x5c\xb9\x92\x8c\xf3\x45\xd9\x15\x49\x91\x0d\x2a\x92\xe3\xa3\xcf\x17\xef\xbf\x04\x25\xef\x62\xea\x4b\x72\x4c\x91\xd0\x11\x35\x60\x3d\xa9\xa7\x34\x79\x79\x76\xf1\xe2\xf5\x02\xbd\x3b\x8c\xb6\x77\x96\x17\xdd\xb2\xe5\xfa\xa4\xb5\xca\xcd\x4d\x2e\xcc\x7a\xfe\xfb\xc7\xe4\xcd\x59\x50\xfb\x71\xc1\x19\x61\x60\xc2\x43\x77\xc0\xc3\x59\xe5\x52\x33\x1e\xc5\x11\x1d\x14\x7a\xe5\x6b\xa5\x7a\xeb\x2d\xa4\x57\xc0\x2a\x3d\x64\x03\x84\xf9\x4f\x64\x74\xf3\x06\x40\xef\x89\xca\xb3\x4e\xa3\x60\x03\xbc\x96\x17\x24\xf2\x8c\xa5\x0d\xe8\xe7\x72\xd7\x05\x7b\x7f\x49\x1e\x89\x43\xbc\x82\x64\x53\x89\xc3\x30\x93\x73\xd2\x9b\x99\x0f\xd8\xb7\x3b\xeb\x47\x08\x97\xdb\xe7\x35\x7f\xe7\xfa\xaf\x4d\xb8\xbe\x11\xa2\xb5\x5e\xf5\x0b\xf6\x6c\xd6\xc1\x4a\xe0\x2e\xaa\x61\x4a\xd5\xcf\x6a\x64\x39\x83\xc2\xa1\xdd\xb3\x5a\xec\xcb\x95\x9a\xbb\x37\x00\xac\x6f\x98\xc1\x5a\x11\xc1\x37\x83\x76\x3d\xbc\x46\x5e\x31\x5b\x3a\xf7\x5f\x63\xff\x8f\xab\xf7\xfa\xff\xe5\xd6\x35\xd3\x5a\x4e\x2c\xf5\x9c\x90\x46\x3d\x16\x07\x35\x19\xff\x04\x00\x00\xff\xff\x03\x79\x6e\x01\x21\x06\x00\x00")

func tplApiTplBytes() ([]byte, error) {
	return bindataRead(
		_tplApiTpl,
		"tpl/api.tpl",
	)
}

func tplApiTpl() (*asset, error) {
	bytes, err := tplApiTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/api.tpl", size: 1569, mode: os.FileMode(438), modTime: time.Unix(1730439649, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/api.tpl": tplApiTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"api.tpl": &bintree{tplApiTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
